public class MultiFileUploader {
    @RemoteAction
    public static Id saveAttachment(Id parentId, String fileName, String base64Data, String contentType) { 
        base64Data = EncodingUtil.urlDecode(base64Data, 'UTF-8');
        
        ContentVersion cv = new ContentVersion();
        if (Schema.sObjectType.ContentVersion.fields.Title.isCreateable()) {
            cv.Title = fileName;
        }
        if (Schema.sObjectType.ContentVersion.fields.PathOnClient.isCreateable()) {
            cv.PathOnClient = fileName;
        }
        if (Schema.sObjectType.ContentVersion.fields.VersionData.isCreateable()) {
            cv.VersionData = EncodingUtil.base64Decode(base64Data);
        }
        if (Schema.sObjectType.ContentVersion.fields.IsMajorVersion.isCreateable()) {
            cv.IsMajorVersion = true;
        }
        insert cv;

        ContentDocumentLink cdl = new ContentDocumentLink();
        if (Schema.sObjectType.ContentDocumentLink.fields.ContentDocumentId.isCreateable()) {
            cdl.ContentDocumentId = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id =: cv.Id].ContentDocumentId;
        }
        if (Schema.sObjectType.ContentDocumentLink.fields.LinkedEntityId.isCreateable()) {
            cdl.LinkedEntityId = parentId;
        }
        if (Schema.sObjectType.ContentDocumentLink.fields.ShareType.isCreateable()) {
            cdl.ShareType = 'V';
        }
        insert cdl;

        return cv.Id;
    }

    @RemoteAction
    public static Id saveTheChunk(Id parentId, String fileName, String base64Data, String contentType, String fileId) { 
        if (fileId == '') {
            fileId = saveAttachment(parentId, fileName, base64Data, contentType);
        } else {
            appendToFile(parentId, fileId, base64Data);
        }
        
        return Id.valueOf(fileId);
    }
    
    private static void appendToFile(Id parentId, Id fileId, String base64Data) {
        if (Schema.sObjectType.ContentVersion.isAccessible()) {
            ContentVersion existingCV = [SELECT Id, VersionData, Title, PathOnClient, ContentDocumentId FROM ContentVersion WHERE Id = :fileId ORDER BY CreatedDate DESC LIMIT 1];

            base64Data = EncodingUtil.urlDecode(base64Data, 'UTF-8');
            
            String existingBody = EncodingUtil.base64Encode(existingCV.VersionData);
            
            ContentVersion cv = new ContentVersion();
            if (Schema.sObjectType.ContentVersion.fields.Title.isCreateable()) {
                cv.Title = existingCV.Title;
            }
            if (Schema.sObjectType.ContentVersion.fields.PathOnClient.isCreateable()) {
                cv.PathOnClient = existingCV.Title;
            }
            if (Schema.sObjectType.ContentVersion.fields.VersionData.isCreateable()) {
                cv.VersionData = EncodingUtil.base64Decode(existingBody + base64Data); 
            }
            if (Schema.sObjectType.ContentVersion.fields.IsMajorVersion.isCreateable()) {
                cv.IsMajorVersion = true;
            }

            if (Schema.sObjectType.ContentDocument.isDeletable()) {
                delete [SELECT Id FROM ContentDocument WHERE Id = :existingCV.ContentDocumentId];
            }
            if (Schema.sObjectType.ContentVersion.isCreateable()) {
                insert cv;
            } else {
                throw new FieloException(String.format(Label.PermissionOnObject, new List<String>{'ContentVersion'}));
            }

            ContentDocumentLink cdl = new ContentDocumentLink();
            if (Schema.sObjectType.ContentDocumentLink.fields.ContentDocumentId.isCreateable()) {
                cdl.ContentDocumentId = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id =: cv.Id].ContentDocumentId;
            }
            if (Schema.sObjectType.ContentDocumentLink.fields.LinkedEntityId.isCreateable()) {
                cdl.LinkedEntityId = parentId;
            }
            if (Schema.sObjectType.ContentDocumentLink.fields.ShareType.isCreateable()) {
                cdl.ShareType = 'V';
            }
            if (Schema.sObjectType.ContentDocumentLink.isCreateable()) {
                insert cdl;
            } else {
                throw new FieloException(String.format(Label.PermissionOnObject, new List<String>{'ContentDocumentLink'}));
            }

            return cv.Id;
        } else {
            throw new FieloException(String.format(Label.PermissionOnObject, new List<String>{'ContentVersion'}));
        }
    }

    @RemoteAction
    public static Boolean deleteFiles(List<String> attachmentIds){
        List<Schema.DescribeSObjectResult> describes = Schema.describeSObjects(new String[]{'Attachment','ContentDocument'}); //[0].getDescribe().getKeyPrefix();
        String attachmentPrefix;
        String contentDocumentPrefix;
        for (Schema.DescribeSObjectResult d: describes) {
          if(d.getName()=='Attachment') {
            attachmentPrefix = d.getKeyPrefix();
          }
          if(d.getName()=='ContentDocument') {
            contentDocumentPrefix = d.getKeyPrefix();
          }
        }

        Set<Id> attachmentIdsSet = new Set<Id>();
        Set<Id> documentIdsSet = new Set<Id>();

        for(String singleId: attachmentIds) {
            if (singleId.substring(0,3).equals(attachmentPrefix)) {
                attachmentIdsSet.add(singleId);
            }
            if (singleId.substring(0,3).equals(contentDocumentPrefix)) {
                documentIdsSet.add(singleId);
            }
        }

        Boolean attachmentResult=false;
        Boolean documentResult=false;
        if (!attachmentIdsSet.isEmpty()) {
            attachmentResult = deleteAttachments(attachmentIdsSet);
        }
        if (!documentIdsSet.isEmpty()) {
            documentResult = deleteDocuments(documentIdsSet);
        }
        
        return attachmentResult || documentResult;
    }

    public static Boolean deleteAttachments(Set<Id> attachmentIdsSet) {
        Boolean result = false;
        String query = 'Select Id, Name From Attachment Where Id in :attachmentIdsSet';
        List<Attachment> attachments = Database.query(query);
        if(Attachment.SObjectType.getDescribe().isDeletable()){
            delete attachments;
            result = true;
        }
        return result;
    }

    public static Boolean deleteDocuments(Set<Id> documentIdsSet) {
        Boolean result = false;
        String query = 'SELECT Id, Title FROM ContentDocument WHERE Id in :documentIdsSet';
        List<ContentDocument> documents = Database.query(query);
        if(ContentDocument.SObjectType.getDescribe().isDeletable()){
            delete documents;
            result = true;
        }
        return result;
    }
}